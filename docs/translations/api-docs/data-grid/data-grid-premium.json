{
  "componentDescription": "",
  "propDescriptions": {
    "aggregationFunctions": "Aggregation functions available on the grid.",
    "aggregationModel": "Set the aggregation model of the grid.",
    "aggregationRowsScope": "Rows used to generate the aggregated value. If <code>filtered</code>, the aggregated values are generated using only the rows currently passing the filtering process. If <code>all</code>, the aggregated values are generated using all the rows.",
    "apiRef": "The ref object that allows grid manipulation. Can be instantiated with <code>useGridApiRef()</code>.",
    "aria-label": "The label of the grid.",
    "aria-labelledby": "The id of the element containing a label for the grid.",
    "autoHeight": "If <code>true</code>, the grid height is dynamic and follow the number of rows in the grid.",
    "autoPageSize": "If <code>true</code>, the pageSize is calculated according to the container size and the max number of rows to avoid rendering a vertical scroll bar.",
    "cellModesModel": "Controls the modes of the cells.",
    "checkboxSelection": "If <code>true</code>, the grid get a first column with a checkbox that allows to select rows.",
    "checkboxSelectionVisibleOnly": "If <code>true</code>, the &quot;Select All&quot; header checkbox selects only the rows on the current page. To be used in combination with <code>checkboxSelection</code>. It only works if the pagination is enabled.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "columnBuffer": "Number of extra columns to be rendered before/after the visible slice.",
    "columnHeaderHeight": "Sets the height in pixel of the column headers in the grid.",
    "columns": "Set of columns of type GridColDef[].",
    "columnThreshold": "Number of rows from the <code>columnBuffer</code> that can be visible before a new slice is rendered.",
    "columnVisibilityModel": "Set the column visibility model of the grid. If defined, the grid will ignore the <code>hide</code> property in <a href=\"/x/api/data-grid/grid-col-def/\">GridColDef</a>.",
    "components": "Overrideable components.",
    "componentsProps": "Overrideable components props dynamically passed to the component at rendering.",
    "defaultGroupingExpansionDepth": "If above 0, the row children will be expanded up to this depth. If equal to -1, all the row children will be expanded.",
    "density": "Set the density of the grid.",
    "detailPanelExpandedRowIds": "The row ids to show the detail panel.",
    "disableAggregation": "If <code>true</code>, aggregation is disabled.",
    "disableChildrenFiltering": "If <code>true</code>, the filtering will only be applied to the top level rows when grouping rows with the <code>treeData</code> prop.",
    "disableChildrenSorting": "If <code>true</code>, the sorting will only be applied to the top level rows when grouping rows with the <code>treeData</code> prop.",
    "disableColumnFilter": "If <code>true</code>, column filters are disabled.",
    "disableColumnMenu": "If <code>true</code>, the column menu is disabled.",
    "disableColumnPinning": "If <code>true</code>, the column pinning is disabled.",
    "disableColumnReorder": "If <code>true</code>, reordering columns is disabled.",
    "disableColumnResize": "If <code>true</code>, resizing columns is disabled.",
    "disableColumnSelector": "If <code>true</code>, hiding/showing columns is disabled.",
    "disableDensitySelector": "If <code>true</code>, the density selector is disabled.",
    "disableMultipleColumnsFiltering": "If <code>true</code>, filtering with multiple columns is disabled.",
    "disableMultipleColumnsSorting": "If <code>true</code>, sorting with multiple columns is disabled.",
    "disableMultipleRowSelection": "If <code>true</code>, multiple selection using the Ctrl or CMD key is disabled.",
    "disableRowGrouping": "If <code>true</code>, the row grouping is disabled.",
    "disableRowSelectionOnClick": "If <code>true</code>, the selection on click on a row or cell is disabled.",
    "disableVirtualization": "If <code>true</code>, the virtualization is disabled.",
    "editMode": "Controls whether to use the cell or row editing.",
    "experimentalFeatures": "Unstable features, breaking changes might be introduced. For each feature, if the flag is not explicitly set to <code>true</code>, then the feature is fully disabled, and neither property nor method calls will have any effect.",
    "filterMode": "Filtering can be processed on the server or client-side. Set it to &#39;server&#39; if you would like to handle filtering on the server-side.",
    "filterModel": "Set the filter model of the grid.",
    "getAggregationPosition": "Determines the position of an aggregated value.<br><br><strong>Signature:</strong><br><code>function(groupNode: GridGroupNode) =&gt; GridAggregationPosition | null</code><br><em>groupNode:</em> The current group.<br> <em>returns</em> (GridAggregationPosition | null): Position of the aggregated value (if <code>null</code>, the group isn&#39;t aggregated).",
    "getCellClassName": "Function that applies CSS classes dynamically on cells.<br><br><strong>Signature:</strong><br><code>function(params: GridCellParams) =&gt; string</code><br><em>params:</em> With all properties from <a href=\"/x/api/data-grid/grid-cell-params/\">GridCellParams</a>.<br> <em>returns</em> (string): The CSS class to apply to the cell.",
    "getDetailPanelContent": "Function that returns the element to render in row detail.<br><br><strong>Signature:</strong><br><code>function(params: GridRowParams) =&gt; JSX.Element</code><br><em>params:</em> With all properties from <a href=\"/x/api/data-grid/grid-row-params/\">GridRowParams</a>.<br> <em>returns</em> (JSX.Element): The row detail element.",
    "getDetailPanelHeight": "Function that returns the height of the row detail panel.<br><br><strong>Signature:</strong><br><code>function(params: GridRowParams) =&gt; number | string</code><br><em>params:</em> With all properties from <a href=\"/x/api/data-grid/grid-row-params/\">GridRowParams</a>.<br> <em>returns</em> (number | string): The height in pixels or &quot;auto&quot; to use the content height.",
    "getEstimatedRowHeight": "Function that returns the estimated height for a row. Only works if dynamic row height is used. Once the row height is measured this value is discarded.<br><br><strong>Signature:</strong><br><code>function(params: GridRowHeightParams) =&gt; number | null</code><br><em>params:</em> With all properties from GridRowHeightParams.<br> <em>returns</em> (number | null): The estimated row height value. If <code>null</code> or <code>undefined</code> then the default row height, based on the density, is applied.",
    "getRowClassName": "Function that applies CSS classes dynamically on rows.<br><br><strong>Signature:</strong><br><code>function(params: GridRowClassNameParams) =&gt; string</code><br><em>params:</em> With all properties from <a href=\"/x/api/data-grid/grid-row-class-name-params/\">GridRowClassNameParams</a>.<br> <em>returns</em> (string): The CSS class to apply to the row.",
    "getRowHeight": "Function that sets the row height per row.<br><br><strong>Signature:</strong><br><code>function(params: GridRowHeightParams) =&gt; GridRowHeightReturnValue</code><br><em>params:</em> With all properties from GridRowHeightParams.<br> <em>returns</em> (GridRowHeightReturnValue): The row height value. If <code>null</code> or <code>undefined</code> then the default row height is applied. If &quot;auto&quot; then the row height is calculated based on the content.",
    "getRowId": "Return the id of a given GridRowModel.",
    "getRowSpacing": "Function that allows to specify the spacing between rows.<br><br><strong>Signature:</strong><br><code>function(params: GridRowSpacingParams) =&gt; GridRowSpacing</code><br><em>params:</em> With all properties from <a href=\"/x/api/data-grid/grid-row-spacing-params/\">GridRowSpacingParams</a>.<br> <em>returns</em> (GridRowSpacing): The row spacing values.",
    "getTreeDataPath": "Determines the path of a row in the tree data. For instance, a row with the path [&quot;A&quot;, &quot;B&quot;] is the child of the row with the path [&quot;A&quot;]. Note that all paths must contain at least one element.<br><br><strong>Signature:</strong><br><code>function(row: R) =&gt; Array&lt;string&gt;</code><br><em>row:</em> The row from which we want the path.<br> <em>returns</em> (Array<string>): The path to the row.",
    "groupingColDef": "The grouping column used by the tree data.",
    "hideFooter": "If <code>true</code>, the footer component is hidden.",
    "hideFooterPagination": "If <code>true</code>, the pagination component in the footer is hidden.",
    "hideFooterRowCount": "If <code>true</code>, the row count in the footer is hidden. It has no effect if the pagination is enabled.",
    "hideFooterSelectedRowCount": "If <code>true</code>, the selected row count in the footer is hidden.",
    "initialState": "The initial state of the DataGridPremium. The data in it is set in the state on initialization but isn&#39;t controlled. If one of the data in <code>initialState</code> is also being controlled, then the control state wins.",
    "isCellEditable": "Callback fired when a cell is rendered, returns true if the cell is editable.<br><br><strong>Signature:</strong><br><code>function(params: GridCellParams) =&gt; boolean</code><br><em>params:</em> With all properties from <a href=\"/x/api/data-grid/grid-cell-params/\">GridCellParams</a>.<br> <em>returns</em> (boolean): A boolean indicating if the cell is editable.",
    "isGroupExpandedByDefault": "Determines if a group should be expanded after its creation. This prop takes priority over the <code>defaultGroupingExpansionDepth</code> prop.<br><br><strong>Signature:</strong><br><code>function(node: GridGroupNode) =&gt; boolean</code><br><em>node:</em> The node of the group to test.<br> <em>returns</em> (boolean): A boolean indicating if the group is expanded.",
    "isRowSelectable": "Determines if a row can be selected.<br><br><strong>Signature:</strong><br><code>function(params: GridRowParams) =&gt; boolean</code><br><em>params:</em> With all properties from <a href=\"/x/api/data-grid/grid-row-params/\">GridRowParams</a>.<br> <em>returns</em> (boolean): A boolean indicating if the cell is selectable.",
    "keepColumnPositionIfDraggedOutside": "If <code>true</code>, moving the mouse pointer outside the grid before releasing the mouse button in a column re-order action will not cause the column to jump back to its original position.",
    "keepNonExistentRowsSelected": "If <code>true</code>, the selection model will retain selected rows that do not exist. Useful when using server side pagination and row selections need to be retained when changing pages.",
    "loading": "If <code>true</code>, a  loading overlay is displayed.",
    "localeText": "Set the locale text of the grid. You can find all the translation keys supported in <a href=\"https://github.com/mui/mui-x/blob/HEAD/packages/grid/x-data-grid/src/constants/localeTextConstants.ts\">the source</a> in the GitHub repository.",
    "logger": "Pass a custom logger in the components that implements the Logger interface.",
    "logLevel": "Allows to pass the logging level or false to turn off logging.",
    "nonce": "Nonce of the inline styles for <a href=\"https://www.w3.org/TR/2016/REC-CSP2-20161215/#script-src-the-nonce-attribute\">Content Security Policy</a>.",
    "onAggregationModelChange": "Callback fired when the row grouping model changes.<br><br><strong>Signature:</strong><br><code>function(model: GridAggregationModel, details: GridCallbackDetails) =&gt; void</code><br><em>model:</em> The aggregated columns.<br><em>details:</em> Additional details for this callback.",
    "onCellClick": "Callback fired when any cell is clicked.<br><br><strong>Signature:</strong><br><code>function(params: GridCellParams, event: MuiEvent&lt;React.MouseEvent&gt;, details: GridCallbackDetails) =&gt; void</code><br><em>params:</em> With all properties from <a href=\"/x/api/data-grid/grid-cell-params/\">GridCellParams</a>.<br><em>event:</em> The event object.<br><em>details:</em> Additional details for this callback.",
    "onCellDoubleClick": "Callback fired when a double click event comes from a cell element.<br><br><strong>Signature:</strong><br><code>function(params: GridCellParams, event: MuiEvent&lt;React.MouseEvent&gt;, details: GridCallbackDetails) =&gt; void</code><br><em>params:</em> With all properties from <a href=\"/x/api/data-grid/grid-cell-params/\">GridCellParams</a>.<br><em>event:</em> The event object.<br><em>details:</em> Additional details for this callback.",
    "onCellEditStart": "Callback fired when the cell turns to edit mode.<br><br><strong>Signature:</strong><br><code>function(params: GridCellParams, event: MuiEvent&lt;React.KeyboardEvent | React.MouseEvent&gt;) =&gt; void</code><br><em>params:</em> With all properties from <a href=\"/x/api/data-grid/grid-cell-params/\">GridCellParams</a>.<br><em>event:</em> The event that caused this prop to be called.",
    "onCellEditStop": "Callback fired when the cell turns to view mode.<br><br><strong>Signature:</strong><br><code>function(params: GridCellParams, event: MuiEvent&lt;MuiBaseEvent&gt;) =&gt; void</code><br><em>params:</em> With all properties from <a href=\"/x/api/data-grid/grid-cell-params/\">GridCellParams</a>.<br><em>event:</em> The event that caused this prop to be called.",
    "onCellKeyDown": "Callback fired when a keydown event comes from a cell element.<br><br><strong>Signature:</strong><br><code>function(params: GridCellParams, event: MuiEvent&lt;React.KeyboardEvent&gt;, details: GridCallbackDetails) =&gt; void</code><br><em>params:</em> With all properties from <a href=\"/x/api/data-grid/grid-cell-params/\">GridCellParams</a>.<br><em>event:</em> The event object.<br><em>details:</em> Additional details for this callback.",
    "onCellModesModelChange": "Callback fired when the <code>cellModesModel</code> prop changes.<br><br><strong>Signature:</strong><br><code>function(cellModesModel: GridCellModesModel, details: GridCallbackDetails) =&gt; void</code><br><em>cellModesModel:</em> Object containig which cells are in &quot;edit&quot; mode.<br><em>details:</em> Additional details for this callback.",
    "onColumnHeaderClick": "Callback fired when a click event comes from a column header element.<br><br><strong>Signature:</strong><br><code>function(params: GridColumnHeaderParams, event: MuiEvent&lt;React.MouseEvent&gt;, details: GridCallbackDetails) =&gt; void</code><br><em>params:</em> With all properties from GridColumnHeaderParams.<br><em>event:</em> The event object.<br><em>details:</em> Additional details for this callback.",
    "onColumnHeaderDoubleClick": "Callback fired when a double click event comes from a column header element.<br><br><strong>Signature:</strong><br><code>function(params: GridColumnHeaderParams, event: MuiEvent&lt;React.MouseEvent&gt;, details: GridCallbackDetails) =&gt; void</code><br><em>params:</em> With all properties from GridColumnHeaderParams.<br><em>event:</em> The event object.<br><em>details:</em> Additional details for this callback.",
    "onColumnHeaderEnter": "Callback fired when a mouse enter event comes from a column header element.<br><br><strong>Signature:</strong><br><code>function(params: GridColumnHeaderParams, event: MuiEvent&lt;React.MouseEvent&gt;, details: GridCallbackDetails) =&gt; void</code><br><em>params:</em> With all properties from GridColumnHeaderParams.<br><em>event:</em> The event object.<br><em>details:</em> Additional details for this callback.",
    "onColumnHeaderLeave": "Callback fired when a mouse leave event comes from a column header element.<br><br><strong>Signature:</strong><br><code>function(params: GridColumnHeaderParams, event: MuiEvent&lt;React.MouseEvent&gt;, details: GridCallbackDetails) =&gt; void</code><br><em>params:</em> With all properties from GridColumnHeaderParams.<br><em>event:</em> The event object.<br><em>details:</em> Additional details for this callback.",
    "onColumnHeaderOut": "Callback fired when a mouseout event comes from a column header element.<br><br><strong>Signature:</strong><br><code>function(params: GridColumnHeaderParams, event: MuiEvent&lt;React.MouseEvent&gt;, details: GridCallbackDetails) =&gt; void</code><br><em>params:</em> With all properties from GridColumnHeaderParams.<br><em>event:</em> The event object.<br><em>details:</em> Additional details for this callback.",
    "onColumnHeaderOver": "Callback fired when a mouseover event comes from a column header element.<br><br><strong>Signature:</strong><br><code>function(params: GridColumnHeaderParams, event: MuiEvent&lt;React.MouseEvent&gt;, details: GridCallbackDetails) =&gt; void</code><br><em>params:</em> With all properties from GridColumnHeaderParams.<br><em>event:</em> The event object.<br><em>details:</em> Additional details for this callback.",
    "onColumnOrderChange": "Callback fired when a column is reordered.<br><br><strong>Signature:</strong><br><code>function(params: GridColumnOrderChangeParams, event: MuiEvent&lt;{}&gt;, details: GridCallbackDetails) =&gt; void</code><br><em>params:</em> With all properties from GridColumnOrderChangeParams.<br><em>event:</em> The event object.<br><em>details:</em> Additional details for this callback.",
    "onColumnResize": "Callback fired while a column is being resized.<br><br><strong>Signature:</strong><br><code>function(params: GridColumnResizeParams, event: MuiEvent&lt;React.MouseEvent&gt;, details: GridCallbackDetails) =&gt; void</code><br><em>params:</em> With all properties from GridColumnResizeParams.<br><em>event:</em> The event object.<br><em>details:</em> Additional details for this callback.",
    "onColumnVisibilityModelChange": "Callback fired when the column visibility model changes.<br><br><strong>Signature:</strong><br><code>function(model: GridColumnVisibilityModel, details: GridCallbackDetails) =&gt; void</code><br><em>model:</em> The new model.<br><em>details:</em> Additional details for this callback.",
    "onColumnWidthChange": "Callback fired when the width of a column is changed.<br><br><strong>Signature:</strong><br><code>function(params: GridColumnResizeParams, event: MuiEvent&lt;React.MouseEvent&gt;, details: GridCallbackDetails) =&gt; void</code><br><em>params:</em> With all properties from GridColumnResizeParams.<br><em>event:</em> The event object.<br><em>details:</em> Additional details for this callback.",
    "onDetailPanelExpandedRowIdsChange": "Callback fired when the detail panel of a row is opened or closed.<br><br><strong>Signature:</strong><br><code>function(ids: Array&lt;GridRowId&gt;, details: GridCallbackDetails) =&gt; void</code><br><em>ids:</em> The ids of the rows which have the detail panel open.<br><em>details:</em> Additional details for this callback.",
    "onExcelExportStateChange": "Callback fired when the state of the Excel export changes.<br><br><strong>Signature:</strong><br><code>function(inProgress: boolean) =&gt; void</code><br><em>inProgress:</em> Indicates if the task is in progress.",
    "onFetchRows": "Callback fired when rowCount is set and the next batch of virtualized rows is rendered.<br><br><strong>Signature:</strong><br><code>function(params: GridFetchRowsParams, event: MuiEvent&lt;{}&gt;, details: GridCallbackDetails) =&gt; void</code><br><em>params:</em> With all properties from GridFetchRowsParams.<br><em>event:</em> The event object.<br><em>details:</em> Additional details for this callback.",
    "onFilterModelChange": "Callback fired when the Filter model changes before the filters are applied.<br><br><strong>Signature:</strong><br><code>function(model: GridFilterModel, details: GridCallbackDetails) =&gt; void</code><br><em>model:</em> With all properties from <a href=\"/x/api/data-grid/grid-filter-model/\">GridFilterModel</a>.<br><em>details:</em> Additional details for this callback.",
    "onMenuClose": "Callback fired when the menu is closed.<br><br><strong>Signature:</strong><br><code>function(params: GridMenuParams, event: MuiEvent&lt;{}&gt;, details: GridCallbackDetails) =&gt; void</code><br><em>params:</em> With all properties from GridMenuParams.<br><em>event:</em> The event object.<br><em>details:</em> Additional details for this callback.",
    "onMenuOpen": "Callback fired when the menu is opened.<br><br><strong>Signature:</strong><br><code>function(params: GridMenuParams, event: MuiEvent&lt;{}&gt;, details: GridCallbackDetails) =&gt; void</code><br><em>params:</em> With all properties from GridMenuParams.<br><em>event:</em> The event object.<br><em>details:</em> Additional details for this callback.",
    "onPaginationModelChange": "Callback fired when the pagination model has changed.<br><br><strong>Signature:</strong><br><code>function(model: GridPaginationModel, details: GridCallbackDetails) =&gt; void</code><br><em>model:</em> Updated pagination model.<br><em>details:</em> Additional details for this callback.",
    "onPinnedColumnsChange": "Callback fired when the pinned columns have changed.<br><br><strong>Signature:</strong><br><code>function(pinnedColumns: GridPinnedColumns, details: GridCallbackDetails) =&gt; void</code><br><em>pinnedColumns:</em> The changed pinned columns.<br><em>details:</em> Additional details for this callback.",
    "onPreferencePanelClose": "Callback fired when the preferences panel is closed.<br><br><strong>Signature:</strong><br><code>function(params: GridPreferencePanelParams, event: MuiEvent&lt;{}&gt;, details: GridCallbackDetails) =&gt; void</code><br><em>params:</em> With all properties from GridPreferencePanelParams.<br><em>event:</em> The event object.<br><em>details:</em> Additional details for this callback.",
    "onPreferencePanelOpen": "Callback fired when the preferences panel is opened.<br><br><strong>Signature:</strong><br><code>function(params: GridPreferencePanelParams, event: MuiEvent&lt;{}&gt;, details: GridCallbackDetails) =&gt; void</code><br><em>params:</em> With all properties from GridPreferencePanelParams.<br><em>event:</em> The event object.<br><em>details:</em> Additional details for this callback.",
    "onProcessRowUpdateError": "Callback called when <code>processRowUpdate</code> throws an error or rejects.<br><br><strong>Signature:</strong><br><code>function(error: any) =&gt; void</code><br><em>error:</em> The error thrown.",
    "onResize": "Callback fired when the grid is resized.<br><br><strong>Signature:</strong><br><code>function(containerSize: ElementSize, event: MuiEvent&lt;{}&gt;, details: GridCallbackDetails) =&gt; void</code><br><em>containerSize:</em> With all properties from ElementSize.<br><em>event:</em> The event object.<br><em>details:</em> Additional details for this callback.",
    "onRowClick": "Callback fired when a row is clicked. Not called if the target clicked is an interactive element added by the built-in columns.<br><br><strong>Signature:</strong><br><code>function(params: GridRowParams, event: MuiEvent&lt;React.MouseEvent&gt;, details: GridCallbackDetails) =&gt; void</code><br><em>params:</em> With all properties from <a href=\"/x/api/data-grid/grid-row-params/\">GridRowParams</a>.<br><em>event:</em> The event object.<br><em>details:</em> Additional details for this callback.",
    "onRowDoubleClick": "Callback fired when a double click event comes from a row container element.<br><br><strong>Signature:</strong><br><code>function(params: GridRowParams, event: MuiEvent&lt;React.MouseEvent&gt;, details: GridCallbackDetails) =&gt; void</code><br><em>params:</em> With all properties from RowParams.<br><em>event:</em> The event object.<br><em>details:</em> Additional details for this callback.",
    "onRowEditCommit": "Callback fired when the row changes are committed.<br><br><strong>Signature:</strong><br><code>function(id: GridRowId, event: MuiEvent&lt;MuiBaseEvent&gt;) =&gt; void</code><br><em>id:</em> The row id.<br><em>event:</em> The event that caused this prop to be called.",
    "onRowEditStart": "Callback fired when the row turns to edit mode.<br><br><strong>Signature:</strong><br><code>function(params: GridRowParams, event: MuiEvent&lt;React.KeyboardEvent | React.MouseEvent&gt;) =&gt; void</code><br><em>params:</em> With all properties from <a href=\"/x/api/data-grid/grid-row-params/\">GridRowParams</a>.<br><em>event:</em> The event that caused this prop to be called.",
    "onRowEditStop": "Callback fired when the row turns to view mode.<br><br><strong>Signature:</strong><br><code>function(params: GridRowParams, event: MuiEvent&lt;MuiBaseEvent&gt;) =&gt; void</code><br><em>params:</em> With all properties from <a href=\"/x/api/data-grid/grid-row-params/\">GridRowParams</a>.<br><em>event:</em> The event that caused this prop to be called.",
    "onRowGroupingModelChange": "Callback fired when the row grouping model changes.<br><br><strong>Signature:</strong><br><code>function(model: GridRowGroupingModel, details: GridCallbackDetails) =&gt; void</code><br><em>model:</em> Columns used as grouping criteria.<br><em>details:</em> Additional details for this callback.",
    "onRowModesModelChange": "Callback fired when the <code>rowModesModel</code> prop changes.<br><br><strong>Signature:</strong><br><code>function(rowModesModel: GridRowModesModel, details: GridCallbackDetails) =&gt; void</code><br><em>rowModesModel:</em> Object containig which rows are in &quot;edit&quot; mode.<br><em>details:</em> Additional details for this callback.",
    "onRowOrderChange": "Callback fired when a row is being reordered.<br><br><strong>Signature:</strong><br><code>function(params: GridRowOrderChangeParams, event: MuiEvent&lt;{}&gt;, details: GridCallbackDetails) =&gt; void</code><br><em>params:</em> With all properties from GridRowOrderChangeParams.<br><em>event:</em> The event object.<br><em>details:</em> Additional details for this callback.",
    "onRowSelectionModelChange": "Callback fired when the selection state of one or multiple rows changes.<br><br><strong>Signature:</strong><br><code>function(rowSelectionModel: GridRowSelectionModel, details: GridCallbackDetails) =&gt; void</code><br><em>rowSelectionModel:</em> With all the row ids GridSelectionModel.<br><em>details:</em> Additional details for this callback.",
    "onRowsScrollEnd": "Callback fired when scrolling to the bottom of the grid viewport.<br><br><strong>Signature:</strong><br><code>function(params: GridRowScrollEndParams, event: MuiEvent&lt;{}&gt;, details: GridCallbackDetails) =&gt; void</code><br><em>params:</em> With all properties from GridRowScrollEndParams.<br><em>event:</em> The event object.<br><em>details:</em> Additional details for this callback.",
    "onSortModelChange": "Callback fired when the sort model changes before a column is sorted.<br><br><strong>Signature:</strong><br><code>function(model: GridSortModel, details: GridCallbackDetails) =&gt; void</code><br><em>model:</em> With all properties from GridSortModel.<br><em>details:</em> Additional details for this callback.",
    "pageSizeOptions": "Select the pageSize dynamically using the component UI.",
    "pagination": "If <code>true</code>, pagination is enabled.",
    "paginationMode": "Pagination can be processed on the server or client-side. Set it to &#39;client&#39; if you would like to handle the pagination on the client-side. Set it to &#39;server&#39; if you would like to handle the pagination on the server-side.",
    "paginationModel": "The pagination model of type GridPaginationModel which refers to current <code>page</code> and <code>pageSize</code>.",
    "pinnedColumns": "The column fields to display pinned to left or right.",
    "pinnedRows": "Rows data to pin on top or bottom.",
    "processRowUpdate": "Callback called before updating a row with new values in the row and cell editing.<br><br><strong>Signature:</strong><br><code>function(newRow: R, oldRow: R) =&gt; Promise&lt;R&gt; | R</code><br><em>newRow:</em> Row object with the new values.<br><em>oldRow:</em> Row object with the old values.<br> <em>returns</em> (Promise<R> | R): The final values to update the row.",
    "rowBuffer": "Number of extra rows to be rendered before/after the visible slice.",
    "rowCount": "Set the total number of rows, if it is different from the length of the value <code>rows</code> prop. If some rows have children (for instance in the tree data), this number represents the amount of top level rows.",
    "rowGroupingColumnMode": "If <code>single</code>, all the columns that are grouped are represented in the same grid column. If <code>multiple</code>, each column that is grouped is represented in its own grid column.",
    "rowGroupingModel": "Set the row grouping model of the grid.",
    "rowHeight": "Sets the height in pixel of a row in the grid.",
    "rowModesModel": "Controls the modes of the rows.",
    "rowReordering": "If <code>true</code>, the reordering of rows is enabled.",
    "rows": "Set of rows of type GridRowsProp.",
    "rowSelection": "If <code>false</code>, the row selection mode is disabled.",
    "rowSelectionModel": "Sets the row selection model of the grid.",
    "rowsLoadingMode": "Loading rows can be processed on the server or client-side. Set it to &#39;client&#39; if you would like enable infnite loading. Set it to &#39;server&#39; if you would like to enable lazy loading. * @default &quot;client&quot;",
    "rowSpacingType": "Sets the type of space between rows added by <code>getRowSpacing</code>.",
    "rowThreshold": "Number of rows from the <code>rowBuffer</code> that can be visible before a new slice is rendered.",
    "scrollbarSize": "Override the height/width of the grid inner scrollbar.",
    "scrollEndThreshold": "Set the area in <code>px</code> at the bottom of the grid viewport where onRowsScrollEnd is called.",
    "showCellVerticalBorder": "If <code>true</code>, the vertical borders of the cells are displayed.",
    "showColumnVerticalBorder": "If <code>true</code>, the right border of the column headers are displayed.",
    "sortingMode": "Sorting can be processed on the server or client-side. Set it to &#39;client&#39; if you would like to handle sorting on the client-side. Set it to &#39;server&#39; if you would like to handle sorting on the server-side.",
    "sortingOrder": "The order of the sorting sequence.",
    "sortModel": "Set the sort model of the grid.",
    "sx": "The system prop that allows defining system overrides as well as additional CSS styles. See the <a href=\"/system/getting-started/the-sx-prop/\">`sx` page</a> for more details.",
    "throttleRowsMs": "If positive, the Grid will throttle updates coming from <code>apiRef.current.updateRows</code> and <code>apiRef.current.setRows</code>. It can be useful if you have a high update rate but do not want to do heavy work like filtering / sorting or rendering on each  individual update.",
    "treeData": "If <code>true</code>, the rows will be gathered in a tree structure according to the <code>getTreeDataPath</code> prop.",
    "unstable_cellSelection": "If <code>true</code>, the cell selection mode is enabled.",
    "unstable_cellSelectionModel": "Set the cell selection model of the grid.",
    "unstable_onCellSelectionModelChange": "Callback fired when the selection state of one or multiple cells changes.<br><br><strong>Signature:</strong><br><code>function(cellSelectionModel: GridCellSelectionModel, details: GridCallbackDetails) =&gt; void</code><br><em>cellSelectionModel:</em> Object in the shape of GridCellSelectionModel containg the selected cells.<br><em>details:</em> Additional details for this callback."
  },
  "classDescriptions": {
    "actionsCell": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the root element of the cell with type=\"actions\""
    },
    "aggregationColumnHeader": {
      "description": "Styles applied to {{nodeName}} when {{conditions}}.",
      "nodeName": "the root element of the column header",
      "conditions": "aggregated"
    },
    "aggregationColumnHeader--alignLeft": {
      "description": "Styles applied to {{nodeName}} when {{conditions}}.",
      "nodeName": "the root element of the header",
      "conditions": "aggregation if <code>headerAlign=\"left\"</code>"
    },
    "aggregationColumnHeader--alignCenter": {
      "description": "Styles applied to {{nodeName}} when {{conditions}}.",
      "nodeName": "the root element of the header",
      "conditions": "aggregation if <code>headerAlign=\"center\"</code>"
    },
    "aggregationColumnHeader--alignRight": {
      "description": "Styles applied to {{nodeName}} when {{conditions}}.",
      "nodeName": "the root element of the header",
      "conditions": "aggregation if <code>headerAlign=\"right\"</code>"
    },
    "aggregationColumnHeaderLabel": {
      "description": "Styles applied to {{nodeName}} when {{conditions}}.",
      "nodeName": "the aggregation label in the column header",
      "conditions": "aggregated"
    },
    "autoHeight": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>autoHeight={true}</code>"
    },
    "booleanCell": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the icon of the boolean cell"
    },
    "cell--editable": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the cell element",
      "conditions": "the cell is editable"
    },
    "cell--editing": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the cell element",
      "conditions": "the cell is in edit mode"
    },
    "cell--textCenter": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the cell element",
      "conditions": "<code>align=\"center\"</code>"
    },
    "cell--textLeft": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the cell element",
      "conditions": "<code>align=\"left\"</code>"
    },
    "cell--textRight": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the cell element",
      "conditions": "<code>align=\"right\"</code>"
    },
    "cell--withRenderer": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the cell element",
      "conditions": "the cell has a custom renderer"
    },
    "cell--rangeTop": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the cell element",
      "conditions": "it is at the top edge of a cell selection range"
    },
    "cell--rangeBottom": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the cell element",
      "conditions": "it is at the bottom edge of a cell selection range"
    },
    "cell--rangeLeft": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the cell element",
      "conditions": "it is at the left edge of a cell selection range"
    },
    "cell--rangeRight": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the cell element",
      "conditions": "it is at the right edge of a cell selection range"
    },
    "cell": { "description": "Styles applied to {{nodeName}}.", "nodeName": "the cell element" },
    "cellContent": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the element that wraps the cell content"
    },
    "cellCheckbox": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the cell checkbox element"
    },
    "cellSkeleton": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the skeleton cell element"
    },
    "checkboxInput": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the selection checkbox element"
    },
    "columnHeader--alignCenter": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the column header",
      "conditions": "<code>headerAlign=\"center\"</code>"
    },
    "columnHeader--alignLeft": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the column header",
      "conditions": "<code>headerAlign=\"left\"</code>"
    },
    "columnHeader--alignRight": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the column header",
      "conditions": "<code>headerAlign=\"right\"</code>"
    },
    "columnHeader--dragging": {
      "description": "Styles applied to {{nodeName}} when {{conditions}}.",
      "nodeName": "the floating column header element",
      "conditions": "it is dragged"
    },
    "columnHeader--moving": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the column header",
      "conditions": "it is being dragged"
    },
    "columnHeader--numeric": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the column header",
      "conditions": "the type of the column is <code>number</code>"
    },
    "columnHeader--sortable": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the column header",
      "conditions": "the column is sortable"
    },
    "columnHeader--sorted": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the column header",
      "conditions": "the column is sorted"
    },
    "columnHeader--filtered": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the column header",
      "conditions": "the column has a filter applied to it"
    },
    "columnHeader": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the column header element"
    },
    "columnGroupHeader": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the column group header element"
    },
    "columnHeaderCheckbox": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the header checkbox cell element"
    },
    "columnHeaderDraggableContainer": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the column header's draggable container element"
    },
    "rowReorderCellPlaceholder": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the row's draggable placeholder element inside the special row reorder cell"
    },
    "columnHeaderDropZone": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the column headers wrapper",
      "conditions": "a column is being dragged"
    },
    "columnHeaderTitle": { "description": "Styles applied to the column header's title element;" },
    "columnHeaderTitleContainer": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the column header's title container element"
    },
    "columnHeaderTitleContainerContent": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the column header's title excepted buttons"
    },
    "columnHeader--filledGroup": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the column group header cell",
      "conditions": "not empty"
    },
    "columnHeader--emptyGroup": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the empty column group header cell"
    },
    "columnHeader--showColumnBorder": {
      "description": "Styles applied to {{nodeName}} when {{conditions}}.",
      "nodeName": "the column group header cell",
      "conditions": "show column border"
    },
    "columnHeaders": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the column headers"
    },
    "columnHeadersInner": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the column headers's inner element"
    },
    "columnHeadersInner--scrollable": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the column headers's inner element",
      "conditions": "there is a horizontal scrollbar"
    },
    "columnSeparator--resizable": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the column header separator",
      "conditions": "the column is resizable"
    },
    "columnSeparator--resizing": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the column header separator",
      "conditions": "the column is being resized"
    },
    "columnSeparator--sideLeft": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the column header separator",
      "conditions": "the side is \"left\""
    },
    "columnSeparator--sideRight": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the column header separator",
      "conditions": "the side is \"right\""
    },
    "columnSeparator": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the column header separator element"
    },
    "columnsPanel": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the columns panel element"
    },
    "columnsPanelRow": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the columns panel row element"
    },
    "detailPanel": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the detail panel element"
    },
    "detailPanels": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the detail panels wrapper element"
    },
    "detailPanelToggleCell": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the detail panel toggle cell element"
    },
    "detailPanelToggleCell--expanded": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the detail panel toggle cell element",
      "conditions": "expanded"
    },
    "footerCell": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the root element of the cell inside a footer row"
    },
    "panel": { "description": "Styles applied to {{nodeName}}.", "nodeName": "the panel element" },
    "panelHeader": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the panel header element"
    },
    "panelWrapper": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the panel wrapper element"
    },
    "panelContent": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the panel content element"
    },
    "panelFooter": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the panel footer element"
    },
    "paper": { "description": "Styles applied to {{nodeName}}.", "nodeName": "the paper element" },
    "editBooleanCell": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "root of the boolean edit component"
    },
    "filterForm": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the root of the filter form component"
    },
    "filterFormDeleteIcon": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the delete icon of the filter form component"
    },
    "filterFormLogicOperatorInput": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the link operator inout of the filter form component"
    },
    "filterFormColumnInput": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the column input of the filter form component"
    },
    "filterFormOperatorInput": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the operator input of the filter form component"
    },
    "filterFormValueInput": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the value input of the filter form component"
    },
    "editInputCell": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the root of the input component"
    },
    "filterIcon": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the filter icon element"
    },
    "footerContainer": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the footer container element"
    },
    "iconButtonContainer": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the column header icon's container"
    },
    "iconSeparator": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the column header separator icon element"
    },
    "main": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the main container element"
    },
    "menu": { "description": "Styles applied to {{nodeName}}.", "nodeName": "the menu element" },
    "menuIcon": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the menu icon element"
    },
    "menuIconButton": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the menu icon button element"
    },
    "menuOpen": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the menu icon element",
      "conditions": "the menu is open"
    },
    "menuList": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the menu list element"
    },
    "overlayWrapper": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the overlay wrapper element"
    },
    "overlayWrapperInner": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the overlay wrapper inner element"
    },
    "overlay": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the overlay element"
    },
    "virtualScroller": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the virtualization container"
    },
    "virtualScrollerContent": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the virtualization content"
    },
    "virtualScrollerContent--overflowed": {
      "description": "Styles applied to {{nodeName}} when {{conditions}}.",
      "nodeName": "the virtualization content",
      "conditions": "its height is bigger than the virtualization container"
    },
    "virtualScrollerRenderZone": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the virtualization render zone"
    },
    "pinnedColumns": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the pinned columns"
    },
    "pinnedColumns--left": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the left pinned columns"
    },
    "pinnedColumns--right": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the right pinned columns"
    },
    "pinnedColumnHeaders": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the pinned column headers"
    },
    "pinnedColumnHeaders--left": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the left pinned column headers"
    },
    "pinnedColumnHeaders--right": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the right pinned column headers"
    },
    "root": { "description": "Styles applied to the root element." },
    "root--densityStandard": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "density is \"standard\" (default)"
    },
    "root--densityComfortable": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "density is \"comfortable\""
    },
    "root--densityCompact": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "density is \"compact\""
    },
    "root--disableUserSelection": {
      "description": "Styles applied to {{nodeName}} when {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "user selection is disabled"
    },
    "row--editable": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the row element",
      "conditions": "the row is editable"
    },
    "row--editing": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the row element",
      "conditions": "the row is in edit mode"
    },
    "row--dragging": {
      "description": "Styles applied to {{nodeName}} when {{conditions}}.",
      "nodeName": "the floating special row reorder cell element",
      "conditions": "it is dragged"
    },
    "row--lastVisible": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the last visible row element on every page of the grid"
    },
    "row--dynamicHeight": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the row",
      "conditions": "it has dynamic row height"
    },
    "row--detailPanelExpanded": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the row",
      "conditions": "its detail panel is open"
    },
    "row": { "description": "Styles applied to {{nodeName}}.", "nodeName": "the row element" },
    "rowCount": {
      "description": "Styles applied to {{nodeName}}.\nOnly works when pagination is disabled.",
      "nodeName": "the footer row count element to show the total number of rows"
    },
    "rowReorderCellContainer": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the row reorder cell container element"
    },
    "rowReorderCell": {
      "description": "Styles applied to the root element of the row reorder cell"
    },
    "rowReorderCell--draggable": {
      "description": "Styles applied to the root element of the row reorder cell when dragging is allowed"
    },
    "scrollArea": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "both scroll area elements"
    },
    "scrollArea--left": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the left scroll area element"
    },
    "scrollArea--right": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the right scroll area element"
    },
    "selectedRowCount": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the footer selected row count element"
    },
    "sortIcon": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the sort icon element"
    },
    "toolbarContainer": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the toolbar container element"
    },
    "toolbarFilterList": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the toolbar filter list element"
    },
    "withBorderColor": {
      "description": "Styles applied to {{nodeName}}, {{conditions}}.\nSets border color only.",
      "nodeName": "cells",
      "conditions": "column header and other elements that have border"
    },
    "cell--withRightBorder": {
      "description": "Styles applied the cell if `showColumnVerticalBorder={true}`."
    },
    "columnHeader--withRightBorder": {
      "description": "Styles applied the column header if `showColumnVerticalBorder={true}`."
    },
    "treeDataGroupingCell": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the root of the grouping column of the tree data"
    },
    "treeDataGroupingCellToggle": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the toggle of the grouping cell of the tree data"
    },
    "groupingCriteriaCell": {
      "description": "Styles applied to the root element of the grouping criteria cell"
    },
    "groupingCriteriaCellToggle": {
      "description": "Styles applied to the toggle of the grouping criteria cell"
    },
    "pinnedRows": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the pinned rows container"
    },
    "pinnedRows--top": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the top pinned rows container"
    },
    "pinnedRows--bottom": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the bottom pinned rows container"
    },
    "pinnedRowsRenderZone": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "pinned rows render zones"
    }
  },
  "slotDescriptions": {
    "BaseButton": "The custom Button component used in the grid.",
    "BaseCheckbox": "The custom Checkbox component used in the grid for both header and cells.",
    "BaseFormControl": "The custom FormControl component used in the grid.",
    "BasePopper": "The custom Popper component used in the grid.",
    "BaseSelect": "The custom Select component used in the grid.",
    "BaseSwitch": "The custom Switch component used in the grid.",
    "BaseTextField": "The custom TextField component used in the grid.",
    "BaseTooltip": "The custom Tooltip component used in the grid.",
    "BooleanCellFalseIcon": "Icon displayed on the boolean cell to represent the false value.",
    "BooleanCellTrueIcon": "Icon displayed on the boolean cell to represent the true value.",
    "Cell": "Component rendered for each cell.",
    "ColumnFilteredIcon": "Icon displayed on the column header menu to show that a filter has been applied to the column.",
    "ColumnHeaderFilterIconButton": "Filter icon component rendered in each column header.",
    "ColumnMenu": "Column menu component rendered by clicking on the 3 dots &quot;kebab&quot; icon in column headers.",
    "ColumnMenuAggregationIcon": "Icon displayed in column menu for aggregation",
    "ColumnMenuClearIcon": "Icon displayed in column menu for clearing values",
    "ColumnMenuFilterIcon": "Icon displayed in column menu for filter",
    "ColumnMenuGroupIcon": "Icon displayed in column menu for grouping",
    "ColumnMenuHideIcon": "Icon displayed in column menu for hiding column",
    "ColumnMenuIcon": "Icon displayed on the side of the column header title to display the filter input component.",
    "ColumnMenuManageColumnsIcon": "Icon displayed in column menu for showing all columns",
    "ColumnMenuPinLeftIcon": "Icon displayed in column menu for left pinning",
    "ColumnMenuPinRightIcon": "Icon displayed in column menu for right pinning",
    "ColumnMenuSortAscendingIcon": "Icon displayed in column menu for ascending sort",
    "ColumnMenuSortDescendingIcon": "Icon displayed in column menu for descending sort",
    "ColumnMenuUngroupIcon": "Icon displayed in column menu for ungrouping",
    "ColumnResizeIcon": "Icon displayed in between two column headers that allows to resize the column header.",
    "ColumnSelectorIcon": "Icon displayed on the column menu selector tab.",
    "ColumnSortedAscendingIcon": "Icon displayed on the side of the column header title when sorted in ascending order.",
    "ColumnSortedDescendingIcon": "Icon displayed on the side of the column header title when sorted in descending order.",
    "ColumnUnsortedIcon": "Icon displayed on the side of the column header title when unsorted.",
    "ColumnsPanel": "GridColumns panel component rendered when clicking the columns button.",
    "DensityComfortableIcon": "Icon displayed on the &quot;comfortable&quot; density option in the toolbar.",
    "DensityCompactIcon": "Icon displayed on the compact density option in the toolbar.",
    "DensityStandardIcon": "Icon displayed on the standard density option in the toolbar.",
    "DetailPanelCollapseIcon": "Icon displayed on the detail panel toggle column when expanded.",
    "DetailPanelExpandIcon": "Icon displayed on the detail panel toggle column when collapsed.",
    "ExportIcon": "Icon displayed on the open export button present in the toolbar by default.",
    "FilterPanel": "Filter panel component rendered when clicking the filter button.",
    "FilterPanelDeleteIcon": "Icon displayed for deleting the filter from filter Panel.",
    "Footer": "Footer component rendered at the bottom of the grid viewport.",
    "GroupingCriteriaCollapseIcon": "Icon displayed on the grouping column when the children are expanded",
    "GroupingCriteriaExpandIcon": "Icon displayed on the grouping column when the children are collapsed",
    "LoadingOverlay": "Loading overlay component rendered when the grid is in a loading state.",
    "MoreActionsIcon": "Icon displayed on the <code>actions</code> column type to open the menu.",
    "NoResultsOverlay": "No results overlay component rendered when the grid has no results after filtering.",
    "NoRowsOverlay": "No rows overlay component rendered when the grid has no rows.",
    "OpenFilterButtonIcon": "Icon displayed on the open filter button present in the toolbar by default.",
    "Pagination": "Pagination component rendered in the grid footer by default.",
    "Panel": "Panel component wrapping the filters and columns panels.",
    "PreferencesPanel": "PreferencesPanel component rendered inside the Header component.",
    "QuickFilterClearIcon": "Icon displayed on the quick filter reset input.",
    "QuickFilterIcon": "Icon displayed on the quick filter input.",
    "Row": "Component rendered for each row.",
    "RowReorderIcon": "Icon displayed on the <code>reorder</code> column type to reorder a row.",
    "SkeletonCell": "Component rendered for each skeleton cell.",
    "Toolbar": "Toolbar component rendered inside the Header component.",
    "TreeDataCollapseIcon": "Icon displayed on the tree data toggling column when the children are expanded",
    "TreeDataExpandIcon": "Icon displayed on the tree data toggling column when the children are collapsed"
  }
}
